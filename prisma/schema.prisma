generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  OFFLINE
}

enum WithdrawStatus {
  PENDING
  ACCEPTED
  REJECTED
  ONREVIEW
}

enum OrderStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum PaymentMethod {
  VISA
  MASTERCARD
  CRYPTO
}

enum WithdrawType {
  TOPUP
  WITHDRAW
}

enum UserRole {
  ADMIN
  USER
  SUPPORT
  VIEWER
}

enum OrderType {
  ADMIN
  USER
}

model Admin {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  password       String
  cards          UserVideoCard[]
  name           String?
  surname        String?
  phoneNumber    String?
  verified       Int              @default(0)
  monthlyProfit  Float            @default(0)
  balance        Float            @default(0)
  role           UserRole         @default(USER)
  createdAt      DateTime         @default(now())
  Withdraw       Withdraw[]
  Order          Order[]
  MonthlyProdits MonthlyProfits[]
  Notification   Notification[]
}

model Withdraw {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String
  amount        Float
  reciept       String         @default("")
  cardNumber    String         @default("No card Number")
  paymentMethod PaymentMethod  @default(VISA)
  type          WithdrawType   @default(WITHDRAW)
  status        WithdrawStatus @default(PENDING)
  description   String?
  createdAt     DateTime       @default(now())
}

model UserVideoCard {
  id          String    @id @default(uuid())
  videcard    VideoCard @relation(fields: [videoCardId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  status      Status    @default(ACTIVE)
  earned      Float     @default(0)
  createdAt   DateTime  @default(now())
  videoCardId String
}

model VideoCard {
  id              String          @id @default(uuid())
  image           String?
  manufacturer    String
  model           String
  release         Int
  algorithm       String
  hashRate        String
  powerEfficiency String
  powerUsage      String
  supportedCoins  String
  network         String
  fans            Int
  temperature     String
  noiseLevel      String
  weight          String
  price           Int             @default(0)
  createdAt       DateTime        @default(now())
  UserVideoCard   UserVideoCard[]
  OrderItems      OrderItems[]
}

model Order {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  read        Boolean      @default(false)
  status      OrderStatus
  description String?
  createdAt   DateTime     @default(now())
  items       OrderItems[]
  orderType   OrderType?
  createdBy   String       @default("system")
}

model OrderItems {
  id          String    @id @default(uuid())
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     String
  videoCard   VideoCard @relation(fields: [videoCardId], references: [id])
  videoCardId String
  count       Int
}

model MonthlyProfits {
  id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  date   DateTime
  profit Float
  userId String

  @@unique([userId, date])
}

model Notification {
  id          String   @id @default(uuid())
  title       String
  description String
  user        User?    @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  userId      String?
}
